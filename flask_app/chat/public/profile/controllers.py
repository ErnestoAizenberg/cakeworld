from typing import Optional

from flask import jsonify, request

from ..dtos import UserDTO


class ProfileController:  # UnMock NEEDED!
    def __init__(self, user_service, profile_service):
        self.user_service = user_service
        self.profile_service = profile_service

    def edit_account(self, user_id: int, new_username: str) -> tuple[str, int]:
        """Редактирование учетной записи пользователя"""
        try:
            updated_user = self.user_service.update_username(user_id, new_username)
            return "Username updated successfully", 200
        except ValueError as e:
            return str(e), 400

    def get_profile(self, username: str) -> tuple[Optional[UserDTO], int]:
        """We Don't save User to db cuz in db we store avatar_path in uuid form, basically we here decoding uuid and if it is not exist new avatar will be generated by AvatarGenerator"""

        user_dto = self.user_service.get_user_by_username(username)
        url_pat_to_avatar = self.profile_service.get_path_to_image(user_dto)

        user_dto.avatar_path = url_pat_to_avatar

        if not user_dto:
            return None, 404
        return user_dto, 200

    def update_user_description(
        self, user_id: int, description: str
    ) -> tuple[str, int]:
        """Обновление описания пользователя"""
        try:
            user = self.user_service.get_user(user_id)
            if not user:
                return "User not found", 404

            user.description = description
            self.user_service.save_user(user)
            return "Description updated successfully", 200
        except Exception as e:
            return str(e), 500

    def get_user_description(self, user_id: int) -> tuple[Optional[str], int]:
        """Получение описания пользователя"""
        user = self.user_service.get_user(user_id)
        if not user:
            return None, 404
        return user.description, 200

    def count_user_posts(self, user_id: int) -> int:
        """Подсчет количества постов пользователя"""
        # Реализация зависит от вашей структуры данных
        return 0

    def get_user_chats(self, user_id: int) -> list:
        """Получение чатов пользователя"""
        # Реализация зависит от вашей структуры данных
        return []

    def update_avatar(self, user: UserDTO, file) -> str:
        """Обновление аватара пользователя"""
        # Реализация зависит от вашей файловой системы/хранилища
        return "path/to/avatar"
