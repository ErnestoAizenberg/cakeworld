

document.addEventListener('DOMContentLoaded', function () {
    let page = 1;
    let isLoading = false; // Флаг для предотвращения множественных запросов
    let hasMore = true; // Флаг для проверки наличия дополнительных данных

    // Загружаем первую порцию данных при загрузке страницы
    loadMessages(page);
    page++;

    // Функция для загрузки сообщений
    function loadMessages(page) {
        if (isLoading || !hasMore) return; // Если уже загружаем или данных больше нет, выходим

        isLoading = true;
        document.getElementById('loading-indicator').style.display = 'block';
        document.getElementById('error-message').style.display = 'none';

        fetch(`/load-post-messages-feed?page=${page}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Ошибка сети или сервера');
                }
                return response.json();
            })
            .then(data => {
                console.log(data); // Отладка: выводим ответ сервера в консоль
                if (!data.posts || data.posts.length === 0) {
                    hasMore = false; // Больше данных нет
                    return;
                }

                const container = document.getElementById('messages-container');
                data.posts.forEach(post => {
                    const postElement = document.createElement('div');
                    postElement.className = post.is_reply ? 'reply' : 'post';
                    let link; if (!post.post_id) { link = `<a href="/view_topic/${post.topic_id}">Топик</a>`; } else { link = `<a href="/view_post/${post.post_id}">Пост</a>`; }
                    postElement.innerHTML = `
<div class="content"> <p>${post.text}</p> <a href="/profile/${post.user_id}">${post.author}</a> <small>${post.time_ago}</small> <small>На: ${link}</small> </div>
                    `;
                    container.appendChild(postElement);
                });
            })
            .catch(error => {
                console.error('Ошибка при загрузке сообщений:', error);
                document.getElementById('error-message').innerText = 'Ошибка при загрузке данных. Пожалуйста, попробуйте позже.';
                document.getElementById('error-message').style.display = 'block';
            })
            .finally(() => {
                isLoading = false;
                document.getElementById('loading-indicator').style.display = 'none';
            });
    }

    // Отслеживаем прокрутку страницы для автоматической подгрузки
    window.addEventListener('scroll', function () {
        const { scrollTop, scrollHeight, clientHeight } = document.documentElement;

        // Если пользователь близко к концу страницы, загружаем новые данные
        if (scrollTop + clientHeight >= scrollHeight - 100) {
            loadMessages(page);
            page++;
        }
    });
});






// Получаем данные из data-атрибутов
const messagesContainer = document.getElementById('messages');
const chatId = messagesContainer.dataset.chatId;
const userId = messagesContainer.dataset.userId;
const userUsername = messagesContainer.dataset.userUsername;
const chatUrlName = messagesContainer.dataset.chatUrlName;

let isLoading = false; // Флаг для предотвращения множественных запросов
let offset = 0; // Смещение для подгрузки сообщений


// Функция для загрузки сообщений
function loadMessages() {
    if (isLoading) return; // Если уже загружаем, выходим
    isLoading = true;

    const loadingIndicator = document.getElementById('loadingIndicator');
    loadingIndicator.style.display = 'block';

    fetch(`/load-chat-messages-feed?chat_id=${chatId}&offset=${offset}&limit=10`)
        .then(response => response.json())
        .then(data => {
            if (data.messages.length > 0) {
                // Создаём DocumentFragment для улучшения производительности
                const fragment = document.createDocumentFragment();
                data.messages.reverse().forEach(message => {
                    const messageElement = createMessageElement(message);
                    fragment.insertBefore(messageElement, fragment.firstChild);
                });

                messagesContainer.insertBefore(fragment, messagesContainer.firstChild);
                offset += data.messages.length; // Увеличиваем смещение
            }
        })
        .catch(error => {
            console.error('Error loading messages:', error);
            showNotification('Ошибка при загрузке сообщений', 'error');
        })
        .finally(() => {
            isLoading = false;
            loadingIndicator.style.display = 'none';
        });
}

function createMessageElement(message) {
    const messageElement = document.createElement('div');
    messageElement.classList.add('message', message.author === userUsername ? 'sent' : 'received');

    // Добавим data-id для идентификации сообщения
    messageElement.setAttribute('data-id', message.id); 

    const imagesHTML = message.image_urls && message.image_urls.length > 0 
        ? `<div class="message-images">
             ${message.image_urls.map(url => `<img src="${url}" alt="Attached Image">`).join('')}
           </div>`
        : '';

    messageElement.innerHTML = `
        <div class="message-content">
            <span style="color:blue;">${message.author}:</span>
            ${message.text}
            ${imagesHTML}
            <div class="message-info">
                <span>${message.created}</span>
                <i class="fas fa-eye"></i> 0
            </div>
        </div>
    `;
    
    // Добавление обработчика события клика для отображения опций
    messageElement.addEventListener('click', () => {
        const options = document.querySelector('.options');
        const messageIdInput = options.querySelector('.message_id');
        
        // Установим ID сообщения в скрытое поле
        messageIdInput.value = message.id;
        
        // Позиционируем меню опций
        options.style.display = 'flex';
        const rect = messageElement.getBoundingClientRect();
        options.style.top = `${rect.top + window.scrollY - options.offsetHeight}px`;
        options.style.left = `${rect.left}px`;
    });

    return messageElement;
}


// Загружаем последние сообщения при загрузке страницы
loadMessages();

// Обработчик прокрутки
messagesContainer.addEventListener('scroll', () => {
    if (messagesContainer.scrollTop === 0) {
        loadMessages(); // Подгружаем сообщения при прокрутке вверх
    }
});

// Socket.IO
const socket = io();

// Join the chat room
socket.emit('join', { username: userUsername, room: chatUrlName });



// Listen for new messages
socket.on('new_message', (data) => {
    const messageElement = createMessageElement(data);
    messagesContainer.appendChild(messageElement);
    messagesContainer.scrollTop = messagesContainer.scrollHeight; // Автоматическая прокрутка к новому сообщению
});


// Обработка отправки сообщения
document.getElementById('messageForm').addEventListener('submit', (e) => {
    e.preventDefault();

    const messageInput = document.getElementById('messageInput');

    const csrfToken = document.getElementById('csrfToken');
    const message = messageInput.value.trim();
    const imageInput = document.getElementById('imageInput');
    const formData = new FormData();

    if (!message && imageInput.files.length === 0) {
        showNotification('Пожалуйста, введите сообщение или выберите файл для отправки.', 'error');
        return;
    }

    // Добавляем данные сообщения
    
    formData.append('csrf_token', csrfToken.value);
    formData.append('user_id', userId);
    formData.append('chat_id', chatId);
    formData.append('message', message);

    // Добавляем изображения
    for (let i = 0; i < imageInput.files.length; i++) {
        formData.append('images[]', imageInput.files[i]);
    }

    // Отправляем данные на сервер
    fetch('/submit_message', {
        method: 'POST',
        body: formData,
    })
        .then(response => {
            if (!response.ok) {
                return response.text().then(text => {
                    console.error('Server returned:', text);
                    throw new Error('Failed to send message');
                });
            }
            return response.json();
        })
        .then(data => {
            if (data.status === 'success') {
                showNotification('Сообщение отправлено успешно!', 'success');
                messageInput.value = ''; // Очищаем текстовое поле
                imageInput.value = ''; // Очищаем поле выбора файла
                imagePreviews.innerHTML = ''; // Очищаем предпросмотр изображений
            } else {
                throw new Error(data.error);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showNotification('Не удалось отправить сообщение. Пожалуйста, попробуйте еще раз.', 'error');
        });
});